// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'db.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Tbl_mkrt_unit.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Tbl_mkrt_unit TABLE
class TableTbl_mkrt_unit extends SqfEntityTableBase {
  TableTbl_mkrt_unit() {
    // declare properties of EntityTable
    tableName = 'tbl_mkrt_units';
    primaryKeyName = 'ROWID';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('unit_code', DbType.text, isNotNull: false),
      SqfEntityFieldBase('customer_name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('customer_address', DbType.text, isNotNull: false),
      SqfEntityFieldBase('email', DbType.text, isNotNull: false),
      SqfEntityFieldBase('electric_id', DbType.text, isNotNull: false),
      SqfEntityFieldBase('water_id', DbType.text, isNotNull: false),
      SqfEntityFieldBase('phone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pppu', DbType.text, isNotNull: false),
      SqfEntityFieldBase('date_pppu', DbType.text, isNotNull: false),
      SqfEntityFieldBase('date_ho', DbType.text, isNotNull: false),
      SqfEntityFieldBase('eligible', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tanggal_dari', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tanggal_sampai', DbType.text, isNotNull: false),
      SqfEntityFieldBase('sync_date', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbl_mkrt_unit();
  }
}

// Tbl_electric TABLE
class TableTbl_electric extends SqfEntityTableBase {
  TableTbl_electric() {
    // declare properties of EntityTable
    tableName = 'tbl_electrics';
    primaryKeyName = 'ROWID';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('idx', DbType.text, isNotNull: false),
      SqfEntityFieldBase('unit_code', DbType.text, isNotNull: false),
      SqfEntityFieldBase('bulan', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tahun', DbType.text, isNotNull: false),
      SqfEntityFieldBase('meteran', DbType.text, isNotNull: false),
      SqfEntityFieldBase('foto', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tanggalinput', DbType.text, isNotNull: false),
      SqfEntityFieldBase('petugas', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pemakaian', DbType.text, isNotNull: false),
      SqfEntityFieldBase('sync_date', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbl_electric();
  }
}

// Tbl_water TABLE
class TableTbl_water extends SqfEntityTableBase {
  TableTbl_water() {
    // declare properties of EntityTable
    tableName = 'tbl_waters';
    primaryKeyName = 'ROWID';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('idx', DbType.text, isNotNull: false),
      SqfEntityFieldBase('unit_code', DbType.text, isNotNull: false),
      SqfEntityFieldBase('bulan', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tahun', DbType.text, isNotNull: false),
      SqfEntityFieldBase('meteran', DbType.text, isNotNull: false),
      SqfEntityFieldBase('foto', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tanggalinput', DbType.text, isNotNull: false),
      SqfEntityFieldBase('petugas', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pemakaian', DbType.text, isNotNull: false),
      SqfEntityFieldBase('sync_date', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbl_water();
  }
}

// Tbl_electrics_temp TABLE
class TableTbl_electrics_temp extends SqfEntityTableBase {
  TableTbl_electrics_temp() {
    // declare properties of EntityTable
    tableName = 'tbl_electrics_temp';
    primaryKeyName = 'ROWID';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('unit_code', DbType.text, isNotNull: false),
      SqfEntityFieldBase('type', DbType.text, isNotNull: false),
      SqfEntityFieldBase('bulan', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tahun', DbType.text, isNotNull: false),
      SqfEntityFieldBase('nomor_seri', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pemakaian', DbType.text, isNotNull: false),
      SqfEntityFieldBase('foto', DbType.text, isNotNull: false),
      SqfEntityFieldBase('insert_date', DbType.text, isNotNull: false),
      SqfEntityFieldBase('insert_by', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbl_electrics_temp();
  }
}

// Tbl_waters_temp TABLE
class TableTbl_waters_temp extends SqfEntityTableBase {
  TableTbl_waters_temp() {
    // declare properties of EntityTable
    tableName = 'tbl_waters_temp';
    primaryKeyName = 'ROWID';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('unit_code', DbType.text, isNotNull: false),
      SqfEntityFieldBase('type', DbType.text, isNotNull: false),
      SqfEntityFieldBase('bulan', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tahun', DbType.text, isNotNull: false),
      SqfEntityFieldBase('nomor_seri', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pemakaian', DbType.text, isNotNull: false),
      SqfEntityFieldBase('foto', DbType.text, isNotNull: false),
      SqfEntityFieldBase('insert_date', DbType.text, isNotNull: false),
      SqfEntityFieldBase('insert_by', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbl_waters_temp();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class DbModel extends SqfEntityModelProvider {
  DbModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    databaseTables = [
      TableTbl_mkrt_unit.getInstance,
      TableTbl_electric.getInstance,
      TableTbl_water.getInstance,
      TableTbl_electrics_temp.getInstance,
      TableTbl_waters_temp.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Tbl_mkrt_unit
class Tbl_mkrt_unit {
  Tbl_mkrt_unit(
      {this.ROWID,
      this.unit_code,
      this.customer_name,
      this.customer_address,
      this.email,
      this.electric_id,
      this.water_id,
      this.phone,
      this.pppu,
      this.date_pppu,
      this.date_ho,
      this.eligible,
      this.tanggal_dari,
      this.tanggal_sampai,
      this.sync_date}) {
    _setDefaultValues();
  }
  Tbl_mkrt_unit.withFields(
      this.unit_code,
      this.customer_name,
      this.customer_address,
      this.email,
      this.electric_id,
      this.water_id,
      this.phone,
      this.pppu,
      this.date_pppu,
      this.date_ho,
      this.eligible,
      this.tanggal_dari,
      this.tanggal_sampai,
      this.sync_date) {
    _setDefaultValues();
  }
  Tbl_mkrt_unit.withId(
      this.ROWID,
      this.unit_code,
      this.customer_name,
      this.customer_address,
      this.email,
      this.electric_id,
      this.water_id,
      this.phone,
      this.pppu,
      this.date_pppu,
      this.date_ho,
      this.eligible,
      this.tanggal_dari,
      this.tanggal_sampai,
      this.sync_date) {
    _setDefaultValues();
  }
  Tbl_mkrt_unit.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    ROWID = int.tryParse(o['ROWID'].toString());
    if (o['unit_code'] != null) {
      unit_code = o['unit_code'] as String;
    }
    if (o['customer_name'] != null) {
      customer_name = o['customer_name'] as String;
    }
    if (o['customer_address'] != null) {
      customer_address = o['customer_address'] as String;
    }
    if (o['email'] != null) {
      email = o['email'] as String;
    }
    if (o['electric_id'] != null) {
      electric_id = o['electric_id'] as String;
    }
    if (o['water_id'] != null) {
      water_id = o['water_id'] as String;
    }
    if (o['phone'] != null) {
      phone = o['phone'] as String;
    }
    if (o['pppu'] != null) {
      pppu = o['pppu'] as String;
    }
    if (o['date_pppu'] != null) {
      date_pppu = o['date_pppu'] as String;
    }
    if (o['date_ho'] != null) {
      date_ho = o['date_ho'] as String;
    }
    if (o['eligible'] != null) {
      eligible = o['eligible'] as String;
    }
    if (o['tanggal_dari'] != null) {
      tanggal_dari = o['tanggal_dari'] as String;
    }
    if (o['tanggal_sampai'] != null) {
      tanggal_sampai = o['tanggal_sampai'] as String;
    }
    if (o['sync_date'] != null) {
      sync_date = o['sync_date'] as String;
    }
  }
  // FIELDS (Tbl_mkrt_unit)
  int ROWID;
  String unit_code;
  String customer_name;
  String customer_address;
  String email;
  String electric_id;
  String water_id;
  String phone;
  String pppu;
  String date_pppu;
  String date_ho;
  String eligible;
  String tanggal_dari;
  String tanggal_sampai;
  String sync_date;

  BoolResult saveResult;
  // end FIELDS (Tbl_mkrt_unit)

  static const bool _softDeleteActivated = false;
  Tbl_mkrt_unitManager __mnTbl_mkrt_unit;

  Tbl_mkrt_unitManager get _mnTbl_mkrt_unit {
    return __mnTbl_mkrt_unit = __mnTbl_mkrt_unit ?? Tbl_mkrt_unitManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (customer_name != null) {
      map['customer_name'] = customer_name;
    }

    if (customer_address != null) {
      map['customer_address'] = customer_address;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (electric_id != null) {
      map['electric_id'] = electric_id;
    }

    if (water_id != null) {
      map['water_id'] = water_id;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (pppu != null) {
      map['pppu'] = pppu;
    }

    if (date_pppu != null) {
      map['date_pppu'] = date_pppu;
    }

    if (date_ho != null) {
      map['date_ho'] = date_ho;
    }

    if (eligible != null) {
      map['eligible'] = eligible;
    }

    if (tanggal_dari != null) {
      map['tanggal_dari'] = tanggal_dari;
    }

    if (tanggal_sampai != null) {
      map['tanggal_sampai'] = tanggal_sampai;
    }

    if (sync_date != null) {
      map['sync_date'] = sync_date;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (customer_name != null) {
      map['customer_name'] = customer_name;
    }

    if (customer_address != null) {
      map['customer_address'] = customer_address;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (electric_id != null) {
      map['electric_id'] = electric_id;
    }

    if (water_id != null) {
      map['water_id'] = water_id;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (pppu != null) {
      map['pppu'] = pppu;
    }

    if (date_pppu != null) {
      map['date_pppu'] = date_pppu;
    }

    if (date_ho != null) {
      map['date_ho'] = date_ho;
    }

    if (eligible != null) {
      map['eligible'] = eligible;
    }

    if (tanggal_dari != null) {
      map['tanggal_dari'] = tanggal_dari;
    }

    if (tanggal_sampai != null) {
      map['tanggal_sampai'] = tanggal_sampai;
    }

    if (sync_date != null) {
      map['sync_date'] = sync_date;
    }

    return map;
  }

  /// This method returns Json String [Tbl_mkrt_unit]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbl_mkrt_unit]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      unit_code,
      customer_name,
      customer_address,
      email,
      electric_id,
      water_id,
      phone,
      pppu,
      date_pppu,
      date_ho,
      eligible,
      tanggal_dari,
      tanggal_sampai,
      sync_date
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      ROWID,
      unit_code,
      customer_name,
      customer_address,
      email,
      electric_id,
      water_id,
      phone,
      pppu,
      date_pppu,
      date_ho,
      eligible,
      tanggal_dari,
      tanggal_sampai,
      sync_date
    ];
  }

  static Future<List<Tbl_mkrt_unit>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_mkrt_unit.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Tbl_mkrt_unit>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbl_mkrt_unit>[];
    try {
      objList = list
          .map((tbl_mkrt_unit) =>
              Tbl_mkrt_unit.fromMap(tbl_mkrt_unit as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_mkrt_unit.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbl_mkrt_unit>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbl_mkrt_unit> objList = <Tbl_mkrt_unit>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbl_mkrt_unit.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbl_mkrt_unit by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int ROWID
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Tbl_mkrt_unit if exist, otherwise returns null
  Future<Tbl_mkrt_unit> getById(int ROWID,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (ROWID == null) {
      return null;
    }
    Tbl_mkrt_unit obj;
    final data = await _mnTbl_mkrt_unit.getById([ROWID]);
    if (data.length != 0) {
      obj = Tbl_mkrt_unit.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbl_mkrt_unit) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record

  /// <returns>Returns ROWID
  Future<int> save() async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_mkrt_unit.insert(this);
    } else {
      // ROWID= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbl_mkrt_unit.update(this);
    }

    return ROWID;
  }

  /// saveAs Tbl_mkrt_unit. Returns a new Primary Key value of Tbl_mkrt_unit

  /// <returns>Returns a new Primary Key value of Tbl_mkrt_unit
  Future<int> saveAs() async {
    ROWID = null;

    return save();
  }

  /// saveAll method saves the sent List<Tbl_mkrt_unit> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Tbl_mkrt_unit> tbl_mkrt_units) async {
    // final results = _mnTbl_mkrt_unit.saveAll('INSERT OR REPLACE INTO tbl_mkrt_units (ROWID,unit_code, customer_name, customer_address, email, electric_id, water_id, phone, pppu, date_pppu, date_ho, eligible, tanggal_dari, tanggal_sampai, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',tbl_mkrt_units);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in tbl_mkrt_units) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < tbl_mkrt_units.length; i++) {
      if (tbl_mkrt_units[i].ROWID == null) {
        tbl_mkrt_units[i].ROWID = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns ROWID
  Future<int> upsert() async {
    try {
      if (await _mnTbl_mkrt_unit.rawInsert(
              'INSERT OR REPLACE INTO tbl_mkrt_units (ROWID,unit_code, customer_name, customer_address, email, electric_id, water_id, phone, pppu, date_pppu, date_ho, eligible, tanggal_dari, tanggal_sampai, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
              [
                ROWID,
                unit_code,
                customer_name,
                customer_address,
                email,
                electric_id,
                water_id,
                phone,
                pppu,
                date_pppu,
                date_ho,
                eligible,
                tanggal_dari,
                tanggal_sampai,
                sync_date
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbl_mkrt_unit ROWID=$ROWID updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbl_mkrt_unit ROWID=$ROWID did not update');
      }
      return ROWID;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbl_mkrt_unit Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Tbl_mkrt_unit>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Tbl_mkrt_unit> tbl_mkrt_units) async {
    final results = await _mnTbl_mkrt_unit.rawInsertAll(
        'INSERT OR REPLACE INTO tbl_mkrt_units (ROWID,unit_code, customer_name, customer_address, email, electric_id, water_id, phone, pppu, date_pppu, date_ho, eligible, tanggal_dari, tanggal_sampai, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        tbl_mkrt_units);
    return results;
  }

  /// Deletes Tbl_mkrt_unit

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Tbl_mkrt_unit invoked (ROWID=$ROWID)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTbl_mkrt_unit
          .delete(QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]));
    } else {
      return _mnTbl_mkrt_unit.updateBatch(
          QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]),
          {'isDeleted': 1});
    }
  }

  Tbl_mkrt_unitFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_mkrt_unitFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Tbl_mkrt_unitFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_mkrt_unitFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion tbl_mkrt_unit

// region Tbl_mkrt_unitField
class Tbl_mkrt_unitField extends SearchCriteria {
  Tbl_mkrt_unitField(this.tbl_mkrt_unitFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Tbl_mkrt_unitFilterBuilder tbl_mkrt_unitFB;

  Tbl_mkrt_unitField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Tbl_mkrt_unitFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    tbl_mkrt_unitFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.EQuals, tbl_mkrt_unitFB._addedBlocks)
        : setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.NotEQuals, tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    tbl_mkrt_unitFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.EQualsOrNull, tbl_mkrt_unitFB._addedBlocks)
        : setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder isNull() {
    tbl_mkrt_unitFB._addedBlocks = setCriteria(
        0,
        tbl_mkrt_unitFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbl_mkrt_unitFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbl_mkrt_unitFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_mkrt_unitFB._addedBlocks);
      _waitingNot = '';
      tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
          tbl_mkrt_unitFB._addedBlocks.retVal;
    }
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_mkrt_unitFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbl_mkrt_unitFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_mkrt_unitFB._addedBlocks);
      _waitingNot = '';
      tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
          tbl_mkrt_unitFB._addedBlocks.retVal;
      tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
          tbl_mkrt_unitFB._addedBlocks.retVal;
    }
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_mkrt_unitFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbl_mkrt_unitFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_mkrt_unitFB._addedBlocks);
      _waitingNot = '';
      tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
          tbl_mkrt_unitFB._addedBlocks.retVal;
    }
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbl_mkrt_unitFB._addedBlocks = setCriteria(
          pFirst,
          tbl_mkrt_unitFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_mkrt_unitFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbl_mkrt_unitFB._addedBlocks = setCriteria(
            pFirst,
            tbl_mkrt_unitFB.parameters,
            param,
            SqlSyntax.LessThan,
            tbl_mkrt_unitFB._addedBlocks);
      } else {
        tbl_mkrt_unitFB._addedBlocks = setCriteria(
            pFirst,
            tbl_mkrt_unitFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            tbl_mkrt_unitFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbl_mkrt_unitFB._addedBlocks = setCriteria(
            pLast,
            tbl_mkrt_unitFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            tbl_mkrt_unitFB._addedBlocks);
      } else {
        tbl_mkrt_unitFB._addedBlocks = setCriteria(
            pLast,
            tbl_mkrt_unitFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            tbl_mkrt_unitFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbl_mkrt_unitFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_mkrt_unitFB._addedBlocks)
        : setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbl_mkrt_unitFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.LessThan, tbl_mkrt_unitFB._addedBlocks)
        : setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbl_mkrt_unitFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_mkrt_unitFB._addedBlocks)
        : setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.LessThan, tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbl_mkrt_unitFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_mkrt_unitFB._addedBlocks)
        : setCriteria(pValue, tbl_mkrt_unitFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }

  Tbl_mkrt_unitFilterBuilder inValues(dynamic pValue) {
    tbl_mkrt_unitFB._addedBlocks = setCriteria(
        pValue,
        tbl_mkrt_unitFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_mkrt_unitFB._addedBlocks);
    _waitingNot = '';
    tbl_mkrt_unitFB._addedBlocks.needEndBlock[tbl_mkrt_unitFB._blockIndex] =
        tbl_mkrt_unitFB._addedBlocks.retVal;
    return tbl_mkrt_unitFB;
  }
}
// endregion Tbl_mkrt_unitField

// region Tbl_mkrt_unitFilterBuilder
class Tbl_mkrt_unitFilterBuilder extends SearchCriteria {
  Tbl_mkrt_unitFilterBuilder(Tbl_mkrt_unit obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Tbl_mkrt_unit _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Tbl_mkrt_unitFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Tbl_mkrt_unitFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Tbl_mkrt_unitFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Tbl_mkrt_unitFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Tbl_mkrt_unitFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Tbl_mkrt_unitFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Tbl_mkrt_unitFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_mkrt_unitFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_mkrt_unitFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_mkrt_unitFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_mkrt_unitFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Tbl_mkrt_unitField setField(
      Tbl_mkrt_unitField field, String colName, DbType dbtype) {
    return Tbl_mkrt_unitField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Tbl_mkrt_unitField _ROWID;
  Tbl_mkrt_unitField get ROWID {
    return _ROWID = setField(_ROWID, 'ROWID', DbType.integer);
  }

  Tbl_mkrt_unitField _unit_code;
  Tbl_mkrt_unitField get unit_code {
    return _unit_code = setField(_unit_code, 'unit_code', DbType.text);
  }

  Tbl_mkrt_unitField _customer_name;
  Tbl_mkrt_unitField get customer_name {
    return _customer_name =
        setField(_customer_name, 'customer_name', DbType.text);
  }

  Tbl_mkrt_unitField _customer_address;
  Tbl_mkrt_unitField get customer_address {
    return _customer_address =
        setField(_customer_address, 'customer_address', DbType.text);
  }

  Tbl_mkrt_unitField _email;
  Tbl_mkrt_unitField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  Tbl_mkrt_unitField _electric_id;
  Tbl_mkrt_unitField get electric_id {
    return _electric_id = setField(_electric_id, 'electric_id', DbType.text);
  }

  Tbl_mkrt_unitField _water_id;
  Tbl_mkrt_unitField get water_id {
    return _water_id = setField(_water_id, 'water_id', DbType.text);
  }

  Tbl_mkrt_unitField _phone;
  Tbl_mkrt_unitField get phone {
    return _phone = setField(_phone, 'phone', DbType.text);
  }

  Tbl_mkrt_unitField _pppu;
  Tbl_mkrt_unitField get pppu {
    return _pppu = setField(_pppu, 'pppu', DbType.text);
  }

  Tbl_mkrt_unitField _date_pppu;
  Tbl_mkrt_unitField get date_pppu {
    return _date_pppu = setField(_date_pppu, 'date_pppu', DbType.text);
  }

  Tbl_mkrt_unitField _date_ho;
  Tbl_mkrt_unitField get date_ho {
    return _date_ho = setField(_date_ho, 'date_ho', DbType.text);
  }

  Tbl_mkrt_unitField _eligible;
  Tbl_mkrt_unitField get eligible {
    return _eligible = setField(_eligible, 'eligible', DbType.text);
  }

  Tbl_mkrt_unitField _tanggal_dari;
  Tbl_mkrt_unitField get tanggal_dari {
    return _tanggal_dari = setField(_tanggal_dari, 'tanggal_dari', DbType.text);
  }

  Tbl_mkrt_unitField _tanggal_sampai;
  Tbl_mkrt_unitField get tanggal_sampai {
    return _tanggal_sampai =
        setField(_tanggal_sampai, 'tanggal_sampai', DbType.text);
  }

  Tbl_mkrt_unitField _sync_date;
  Tbl_mkrt_unitField get sync_date {
    return _sync_date = setField(_sync_date, 'sync_date', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Tbl_mkrt_unit._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Tbl_mkrt_unit> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Tbl_mkrt_unit._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbl_mkrt_unit.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbl_mkrt_unit.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'ROWID IN (SELECT ROWID from tbl_mkrt_units ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTbl_mkrt_unit.updateBatch(qparams, values);
  }

  /// This method always returns Tbl_mkrt_unit Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_mkrt_unit>
  Future<Tbl_mkrt_unit> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbl_mkrt_unit.toList(qparams);
    final data = await objFuture;
    Tbl_mkrt_unit obj;
    if (data.isNotEmpty) {
      obj = Tbl_mkrt_unit.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Tbl_mkrt_unit]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) tbl_mkrt_unitCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbl_mkrt_unitsFuture = await _obj._mnTbl_mkrt_unit.toList(qparams);
    final int count = tbl_mkrt_unitsFuture[0]['CNT'] as int;
    if (tbl_mkrt_unitCount != null) {
      tbl_mkrt_unitCount(count);
    }
    return count;
  }

  /// This method returns List<Tbl_mkrt_unit> [Tbl_mkrt_unit]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_mkrt_unit>
  Future<List<Tbl_mkrt_unit>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Tbl_mkrt_unit> tbl_mkrt_unitsData =
        await Tbl_mkrt_unit.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return tbl_mkrt_unitsData;
  }

  /// This method returns Json String [Tbl_mkrt_unit]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbl_mkrt_unit]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbl_mkrt_unit]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbl_mkrt_unit.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbl_mkrt_unit]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `ROWID` FROM tbl_mkrt_units WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> ROWIDData = <int>[];
    qparams.selectColumns = ['ROWID'];
    final ROWIDFuture = await _obj._mnTbl_mkrt_unit.toList(qparams);

    final int count = ROWIDFuture.length;
    for (int i = 0; i < count; i++) {
      ROWIDData.add(ROWIDFuture[i]['ROWID'] as int);
    }
    return ROWIDData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbl_mkrt_unit]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_mkrt_unit.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Tbl_mkrt_unit.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_mkrt_unit.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Tbl_mkrt_unitFilterBuilder

// region Tbl_mkrt_unitFields
class Tbl_mkrt_unitFields {
  static TableField _fROWID;
  static TableField get ROWID {
    return _fROWID =
        _fROWID ?? SqlSyntax.setField(_fROWID, 'rowid', DbType.integer);
  }

  static TableField _fUnit_code;
  static TableField get unit_code {
    return _fUnit_code = _fUnit_code ??
        SqlSyntax.setField(_fUnit_code, 'unit_code', DbType.text);
  }

  static TableField _fCustomer_name;
  static TableField get customer_name {
    return _fCustomer_name = _fCustomer_name ??
        SqlSyntax.setField(_fCustomer_name, 'customer_name', DbType.text);
  }

  static TableField _fCustomer_address;
  static TableField get customer_address {
    return _fCustomer_address = _fCustomer_address ??
        SqlSyntax.setField(_fCustomer_address, 'customer_address', DbType.text);
  }

  static TableField _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField _fElectric_id;
  static TableField get electric_id {
    return _fElectric_id = _fElectric_id ??
        SqlSyntax.setField(_fElectric_id, 'electric_id', DbType.text);
  }

  static TableField _fWater_id;
  static TableField get water_id {
    return _fWater_id =
        _fWater_id ?? SqlSyntax.setField(_fWater_id, 'water_id', DbType.text);
  }

  static TableField _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField _fPppu;
  static TableField get pppu {
    return _fPppu = _fPppu ?? SqlSyntax.setField(_fPppu, 'pppu', DbType.text);
  }

  static TableField _fDate_pppu;
  static TableField get date_pppu {
    return _fDate_pppu = _fDate_pppu ??
        SqlSyntax.setField(_fDate_pppu, 'date_pppu', DbType.text);
  }

  static TableField _fDate_ho;
  static TableField get date_ho {
    return _fDate_ho =
        _fDate_ho ?? SqlSyntax.setField(_fDate_ho, 'date_ho', DbType.text);
  }

  static TableField _fEligible;
  static TableField get eligible {
    return _fEligible =
        _fEligible ?? SqlSyntax.setField(_fEligible, 'eligible', DbType.text);
  }

  static TableField _fTanggal_dari;
  static TableField get tanggal_dari {
    return _fTanggal_dari = _fTanggal_dari ??
        SqlSyntax.setField(_fTanggal_dari, 'tanggal_dari', DbType.text);
  }

  static TableField _fTanggal_sampai;
  static TableField get tanggal_sampai {
    return _fTanggal_sampai = _fTanggal_sampai ??
        SqlSyntax.setField(_fTanggal_sampai, 'tanggal_sampai', DbType.text);
  }

  static TableField _fSync_date;
  static TableField get sync_date {
    return _fSync_date = _fSync_date ??
        SqlSyntax.setField(_fSync_date, 'sync_date', DbType.text);
  }
}
// endregion Tbl_mkrt_unitFields

//region Tbl_mkrt_unitManager
class Tbl_mkrt_unitManager extends SqfEntityProvider {
  Tbl_mkrt_unitManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tbl_mkrt_units';
  static final List<String> _primaryKeyList = ['ROWID'];
  static final String _whereStr = 'ROWID=?';
}

//endregion Tbl_mkrt_unitManager
// region Tbl_electric
class Tbl_electric {
  Tbl_electric(
      {this.ROWID,
      this.idx,
      this.unit_code,
      this.bulan,
      this.tahun,
      this.meteran,
      this.foto,
      this.tanggalinput,
      this.petugas,
      this.pemakaian,
      this.sync_date}) {
    _setDefaultValues();
  }
  Tbl_electric.withFields(
      this.idx,
      this.unit_code,
      this.bulan,
      this.tahun,
      this.meteran,
      this.foto,
      this.tanggalinput,
      this.petugas,
      this.pemakaian,
      this.sync_date) {
    _setDefaultValues();
  }
  Tbl_electric.withId(
      this.ROWID,
      this.idx,
      this.unit_code,
      this.bulan,
      this.tahun,
      this.meteran,
      this.foto,
      this.tanggalinput,
      this.petugas,
      this.pemakaian,
      this.sync_date) {
    _setDefaultValues();
  }
  Tbl_electric.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    ROWID = int.tryParse(o['ROWID'].toString());
    if (o['idx'] != null) {
      idx = o['idx'] as String;
    }
    if (o['unit_code'] != null) {
      unit_code = o['unit_code'] as String;
    }
    if (o['bulan'] != null) {
      bulan = o['bulan'] as String;
    }
    if (o['tahun'] != null) {
      tahun = o['tahun'] as String;
    }
    if (o['meteran'] != null) {
      meteran = o['meteran'] as String;
    }
    if (o['foto'] != null) {
      foto = o['foto'] as String;
    }
    if (o['tanggalinput'] != null) {
      tanggalinput = o['tanggalinput'] as String;
    }
    if (o['petugas'] != null) {
      petugas = o['petugas'] as String;
    }
    if (o['pemakaian'] != null) {
      pemakaian = o['pemakaian'] as String;
    }
    if (o['sync_date'] != null) {
      sync_date = o['sync_date'] as String;
    }
  }
  // FIELDS (Tbl_electric)
  int ROWID;
  String idx;
  String unit_code;
  String bulan;
  String tahun;
  String meteran;
  String foto;
  String tanggalinput;
  String petugas;
  String pemakaian;
  String sync_date;

  BoolResult saveResult;
  // end FIELDS (Tbl_electric)

  static const bool _softDeleteActivated = false;
  Tbl_electricManager __mnTbl_electric;

  Tbl_electricManager get _mnTbl_electric {
    return __mnTbl_electric = __mnTbl_electric ?? Tbl_electricManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (idx != null) {
      map['idx'] = idx;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (meteran != null) {
      map['meteran'] = meteran;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (tanggalinput != null) {
      map['tanggalinput'] = tanggalinput;
    }

    if (petugas != null) {
      map['petugas'] = petugas;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (sync_date != null) {
      map['sync_date'] = sync_date;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (idx != null) {
      map['idx'] = idx;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (meteran != null) {
      map['meteran'] = meteran;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (tanggalinput != null) {
      map['tanggalinput'] = tanggalinput;
    }

    if (petugas != null) {
      map['petugas'] = petugas;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (sync_date != null) {
      map['sync_date'] = sync_date;
    }

    return map;
  }

  /// This method returns Json String [Tbl_electric]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbl_electric]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      idx,
      unit_code,
      bulan,
      tahun,
      meteran,
      foto,
      tanggalinput,
      petugas,
      pemakaian,
      sync_date
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      ROWID,
      idx,
      unit_code,
      bulan,
      tahun,
      meteran,
      foto,
      tanggalinput,
      petugas,
      pemakaian,
      sync_date
    ];
  }

  static Future<List<Tbl_electric>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_electric.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Tbl_electric>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbl_electric>[];
    try {
      objList = list
          .map((tbl_electric) =>
              Tbl_electric.fromMap(tbl_electric as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_electric.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbl_electric>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbl_electric> objList = <Tbl_electric>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbl_electric.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbl_electric by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int ROWID
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Tbl_electric if exist, otherwise returns null
  Future<Tbl_electric> getById(int ROWID,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (ROWID == null) {
      return null;
    }
    Tbl_electric obj;
    final data = await _mnTbl_electric.getById([ROWID]);
    if (data.length != 0) {
      obj = Tbl_electric.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbl_electric) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record

  /// <returns>Returns ROWID
  Future<int> save() async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_electric.insert(this);
    } else {
      // ROWID= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbl_electric.update(this);
    }

    return ROWID;
  }

  /// saveAs Tbl_electric. Returns a new Primary Key value of Tbl_electric

  /// <returns>Returns a new Primary Key value of Tbl_electric
  Future<int> saveAs() async {
    ROWID = null;

    return save();
  }

  /// saveAll method saves the sent List<Tbl_electric> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tbl_electric> tbl_electrics) async {
    // final results = _mnTbl_electric.saveAll('INSERT OR REPLACE INTO tbl_electrics (ROWID,idx, unit_code, bulan, tahun, meteran, foto, tanggalinput, petugas, pemakaian, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',tbl_electrics);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in tbl_electrics) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < tbl_electrics.length; i++) {
      if (tbl_electrics[i].ROWID == null) {
        tbl_electrics[i].ROWID = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns ROWID
  Future<int> upsert() async {
    try {
      if (await _mnTbl_electric.rawInsert(
              'INSERT OR REPLACE INTO tbl_electrics (ROWID,idx, unit_code, bulan, tahun, meteran, foto, tanggalinput, petugas, pemakaian, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
              [
                ROWID,
                idx,
                unit_code,
                bulan,
                tahun,
                meteran,
                foto,
                tanggalinput,
                petugas,
                pemakaian,
                sync_date
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbl_electric ROWID=$ROWID updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbl_electric ROWID=$ROWID did not update');
      }
      return ROWID;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbl_electric Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Tbl_electric>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Tbl_electric> tbl_electrics) async {
    final results = await _mnTbl_electric.rawInsertAll(
        'INSERT OR REPLACE INTO tbl_electrics (ROWID,idx, unit_code, bulan, tahun, meteran, foto, tanggalinput, petugas, pemakaian, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbl_electrics);
    return results;
  }

  /// Deletes Tbl_electric

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Tbl_electric invoked (ROWID=$ROWID)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTbl_electric
          .delete(QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]));
    } else {
      return _mnTbl_electric.updateBatch(
          QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]),
          {'isDeleted': 1});
    }
  }

  Tbl_electricFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_electricFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Tbl_electricFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_electricFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion tbl_electric

// region Tbl_electricField
class Tbl_electricField extends SearchCriteria {
  Tbl_electricField(this.tbl_electricFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Tbl_electricFilterBuilder tbl_electricFB;

  Tbl_electricField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Tbl_electricFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    tbl_electricFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.EQuals, tbl_electricFB._addedBlocks)
        : setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.NotEQuals, tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    tbl_electricFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.EQualsOrNull, tbl_electricFB._addedBlocks)
        : setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder isNull() {
    tbl_electricFB._addedBlocks = setCriteria(
        0,
        tbl_electricFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbl_electricFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbl_electricFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electricFB._addedBlocks);
      _waitingNot = '';
      tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
          tbl_electricFB._addedBlocks.retVal;
    }
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_electricFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbl_electricFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electricFB._addedBlocks);
      _waitingNot = '';
      tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
          tbl_electricFB._addedBlocks.retVal;
      tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
          tbl_electricFB._addedBlocks.retVal;
    }
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_electricFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbl_electricFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electricFB._addedBlocks);
      _waitingNot = '';
      tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
          tbl_electricFB._addedBlocks.retVal;
    }
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbl_electricFB._addedBlocks = setCriteria(
          pFirst,
          tbl_electricFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electricFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbl_electricFB._addedBlocks = setCriteria(
            pFirst,
            tbl_electricFB.parameters,
            param,
            SqlSyntax.LessThan,
            tbl_electricFB._addedBlocks);
      } else {
        tbl_electricFB._addedBlocks = setCriteria(
            pFirst,
            tbl_electricFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            tbl_electricFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbl_electricFB._addedBlocks = setCriteria(
            pLast,
            tbl_electricFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            tbl_electricFB._addedBlocks);
      } else {
        tbl_electricFB._addedBlocks = setCriteria(
            pLast,
            tbl_electricFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            tbl_electricFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbl_electricFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_electricFB._addedBlocks)
        : setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbl_electricFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.LessThan, tbl_electricFB._addedBlocks)
        : setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbl_electricFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_electricFB._addedBlocks)
        : setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.LessThan, tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbl_electricFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_electricFB._addedBlocks)
        : setCriteria(pValue, tbl_electricFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }

  Tbl_electricFilterBuilder inValues(dynamic pValue) {
    tbl_electricFB._addedBlocks = setCriteria(
        pValue,
        tbl_electricFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_electricFB._addedBlocks);
    _waitingNot = '';
    tbl_electricFB._addedBlocks.needEndBlock[tbl_electricFB._blockIndex] =
        tbl_electricFB._addedBlocks.retVal;
    return tbl_electricFB;
  }
}
// endregion Tbl_electricField

// region Tbl_electricFilterBuilder
class Tbl_electricFilterBuilder extends SearchCriteria {
  Tbl_electricFilterBuilder(Tbl_electric obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Tbl_electric _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Tbl_electricFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Tbl_electricFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Tbl_electricFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Tbl_electricFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Tbl_electricFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Tbl_electricFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Tbl_electricFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_electricFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_electricFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_electricFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_electricFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Tbl_electricField setField(
      Tbl_electricField field, String colName, DbType dbtype) {
    return Tbl_electricField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Tbl_electricField _ROWID;
  Tbl_electricField get ROWID {
    return _ROWID = setField(_ROWID, 'ROWID', DbType.integer);
  }

  Tbl_electricField _idx;
  Tbl_electricField get idx {
    return _idx = setField(_idx, 'idx', DbType.text);
  }

  Tbl_electricField _unit_code;
  Tbl_electricField get unit_code {
    return _unit_code = setField(_unit_code, 'unit_code', DbType.text);
  }

  Tbl_electricField _bulan;
  Tbl_electricField get bulan {
    return _bulan = setField(_bulan, 'bulan', DbType.text);
  }

  Tbl_electricField _tahun;
  Tbl_electricField get tahun {
    return _tahun = setField(_tahun, 'tahun', DbType.text);
  }

  Tbl_electricField _meteran;
  Tbl_electricField get meteran {
    return _meteran = setField(_meteran, 'meteran', DbType.text);
  }

  Tbl_electricField _foto;
  Tbl_electricField get foto {
    return _foto = setField(_foto, 'foto', DbType.text);
  }

  Tbl_electricField _tanggalinput;
  Tbl_electricField get tanggalinput {
    return _tanggalinput = setField(_tanggalinput, 'tanggalinput', DbType.text);
  }

  Tbl_electricField _petugas;
  Tbl_electricField get petugas {
    return _petugas = setField(_petugas, 'petugas', DbType.text);
  }

  Tbl_electricField _pemakaian;
  Tbl_electricField get pemakaian {
    return _pemakaian = setField(_pemakaian, 'pemakaian', DbType.text);
  }

  Tbl_electricField _sync_date;
  Tbl_electricField get sync_date {
    return _sync_date = setField(_sync_date, 'sync_date', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Tbl_electric._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Tbl_electric> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Tbl_electric._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbl_electric.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbl_electric.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'ROWID IN (SELECT ROWID from tbl_electrics ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTbl_electric.updateBatch(qparams, values);
  }

  /// This method always returns Tbl_electric Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_electric>
  Future<Tbl_electric> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbl_electric.toList(qparams);
    final data = await objFuture;
    Tbl_electric obj;
    if (data.isNotEmpty) {
      obj = Tbl_electric.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Tbl_electric]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) tbl_electricCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbl_electricsFuture = await _obj._mnTbl_electric.toList(qparams);
    final int count = tbl_electricsFuture[0]['CNT'] as int;
    if (tbl_electricCount != null) {
      tbl_electricCount(count);
    }
    return count;
  }

  /// This method returns List<Tbl_electric> [Tbl_electric]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_electric>
  Future<List<Tbl_electric>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Tbl_electric> tbl_electricsData = await Tbl_electric.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tbl_electricsData;
  }

  /// This method returns Json String [Tbl_electric]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbl_electric]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbl_electric]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbl_electric.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbl_electric]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `ROWID` FROM tbl_electrics WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> ROWIDData = <int>[];
    qparams.selectColumns = ['ROWID'];
    final ROWIDFuture = await _obj._mnTbl_electric.toList(qparams);

    final int count = ROWIDFuture.length;
    for (int i = 0; i < count; i++) {
      ROWIDData.add(ROWIDFuture[i]['ROWID'] as int);
    }
    return ROWIDData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbl_electric]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_electric.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Tbl_electric.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_electric.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Tbl_electricFilterBuilder

// region Tbl_electricFields
class Tbl_electricFields {
  static TableField _fROWID;
  static TableField get ROWID {
    return _fROWID =
        _fROWID ?? SqlSyntax.setField(_fROWID, 'rowid', DbType.integer);
  }

  static TableField _fIdx;
  static TableField get idx {
    return _fIdx = _fIdx ?? SqlSyntax.setField(_fIdx, 'idx', DbType.text);
  }

  static TableField _fUnit_code;
  static TableField get unit_code {
    return _fUnit_code = _fUnit_code ??
        SqlSyntax.setField(_fUnit_code, 'unit_code', DbType.text);
  }

  static TableField _fBulan;
  static TableField get bulan {
    return _fBulan =
        _fBulan ?? SqlSyntax.setField(_fBulan, 'bulan', DbType.text);
  }

  static TableField _fTahun;
  static TableField get tahun {
    return _fTahun =
        _fTahun ?? SqlSyntax.setField(_fTahun, 'tahun', DbType.text);
  }

  static TableField _fMeteran;
  static TableField get meteran {
    return _fMeteran =
        _fMeteran ?? SqlSyntax.setField(_fMeteran, 'meteran', DbType.text);
  }

  static TableField _fFoto;
  static TableField get foto {
    return _fFoto = _fFoto ?? SqlSyntax.setField(_fFoto, 'foto', DbType.text);
  }

  static TableField _fTanggalinput;
  static TableField get tanggalinput {
    return _fTanggalinput = _fTanggalinput ??
        SqlSyntax.setField(_fTanggalinput, 'tanggalinput', DbType.text);
  }

  static TableField _fPetugas;
  static TableField get petugas {
    return _fPetugas =
        _fPetugas ?? SqlSyntax.setField(_fPetugas, 'petugas', DbType.text);
  }

  static TableField _fPemakaian;
  static TableField get pemakaian {
    return _fPemakaian = _fPemakaian ??
        SqlSyntax.setField(_fPemakaian, 'pemakaian', DbType.text);
  }

  static TableField _fSync_date;
  static TableField get sync_date {
    return _fSync_date = _fSync_date ??
        SqlSyntax.setField(_fSync_date, 'sync_date', DbType.text);
  }
}
// endregion Tbl_electricFields

//region Tbl_electricManager
class Tbl_electricManager extends SqfEntityProvider {
  Tbl_electricManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tbl_electrics';
  static final List<String> _primaryKeyList = ['ROWID'];
  static final String _whereStr = 'ROWID=?';
}

//endregion Tbl_electricManager
// region Tbl_water
class Tbl_water {
  Tbl_water(
      {this.ROWID,
      this.idx,
      this.unit_code,
      this.bulan,
      this.tahun,
      this.meteran,
      this.foto,
      this.tanggalinput,
      this.petugas,
      this.pemakaian,
      this.sync_date}) {
    _setDefaultValues();
  }
  Tbl_water.withFields(
      this.idx,
      this.unit_code,
      this.bulan,
      this.tahun,
      this.meteran,
      this.foto,
      this.tanggalinput,
      this.petugas,
      this.pemakaian,
      this.sync_date) {
    _setDefaultValues();
  }
  Tbl_water.withId(
      this.ROWID,
      this.idx,
      this.unit_code,
      this.bulan,
      this.tahun,
      this.meteran,
      this.foto,
      this.tanggalinput,
      this.petugas,
      this.pemakaian,
      this.sync_date) {
    _setDefaultValues();
  }
  Tbl_water.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    ROWID = int.tryParse(o['ROWID'].toString());
    if (o['idx'] != null) {
      idx = o['idx'] as String;
    }
    if (o['unit_code'] != null) {
      unit_code = o['unit_code'] as String;
    }
    if (o['bulan'] != null) {
      bulan = o['bulan'] as String;
    }
    if (o['tahun'] != null) {
      tahun = o['tahun'] as String;
    }
    if (o['meteran'] != null) {
      meteran = o['meteran'] as String;
    }
    if (o['foto'] != null) {
      foto = o['foto'] as String;
    }
    if (o['tanggalinput'] != null) {
      tanggalinput = o['tanggalinput'] as String;
    }
    if (o['petugas'] != null) {
      petugas = o['petugas'] as String;
    }
    if (o['pemakaian'] != null) {
      pemakaian = o['pemakaian'] as String;
    }
    if (o['sync_date'] != null) {
      sync_date = o['sync_date'] as String;
    }
  }
  // FIELDS (Tbl_water)
  int ROWID;
  String idx;
  String unit_code;
  String bulan;
  String tahun;
  String meteran;
  String foto;
  String tanggalinput;
  String petugas;
  String pemakaian;
  String sync_date;

  BoolResult saveResult;
  // end FIELDS (Tbl_water)

  static const bool _softDeleteActivated = false;
  Tbl_waterManager __mnTbl_water;

  Tbl_waterManager get _mnTbl_water {
    return __mnTbl_water = __mnTbl_water ?? Tbl_waterManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (idx != null) {
      map['idx'] = idx;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (meteran != null) {
      map['meteran'] = meteran;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (tanggalinput != null) {
      map['tanggalinput'] = tanggalinput;
    }

    if (petugas != null) {
      map['petugas'] = petugas;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (sync_date != null) {
      map['sync_date'] = sync_date;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (idx != null) {
      map['idx'] = idx;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (meteran != null) {
      map['meteran'] = meteran;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (tanggalinput != null) {
      map['tanggalinput'] = tanggalinput;
    }

    if (petugas != null) {
      map['petugas'] = petugas;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (sync_date != null) {
      map['sync_date'] = sync_date;
    }

    return map;
  }

  /// This method returns Json String [Tbl_water]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbl_water]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      idx,
      unit_code,
      bulan,
      tahun,
      meteran,
      foto,
      tanggalinput,
      petugas,
      pemakaian,
      sync_date
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      ROWID,
      idx,
      unit_code,
      bulan,
      tahun,
      meteran,
      foto,
      tanggalinput,
      petugas,
      pemakaian,
      sync_date
    ];
  }

  static Future<List<Tbl_water>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_water.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Tbl_water>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbl_water>[];
    try {
      objList = list
          .map((tbl_water) =>
              Tbl_water.fromMap(tbl_water as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_water.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbl_water>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbl_water> objList = <Tbl_water>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbl_water.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbl_water by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int ROWID
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Tbl_water if exist, otherwise returns null
  Future<Tbl_water> getById(int ROWID,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (ROWID == null) {
      return null;
    }
    Tbl_water obj;
    final data = await _mnTbl_water.getById([ROWID]);
    if (data.length != 0) {
      obj = Tbl_water.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbl_water) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record

  /// <returns>Returns ROWID
  Future<int> save() async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_water.insert(this);
    } else {
      // ROWID= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbl_water.update(this);
    }

    return ROWID;
  }

  /// saveAs Tbl_water. Returns a new Primary Key value of Tbl_water

  /// <returns>Returns a new Primary Key value of Tbl_water
  Future<int> saveAs() async {
    ROWID = null;

    return save();
  }

  /// saveAll method saves the sent List<Tbl_water> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tbl_water> tbl_waters) async {
    // final results = _mnTbl_water.saveAll('INSERT OR REPLACE INTO tbl_waters (ROWID,idx, unit_code, bulan, tahun, meteran, foto, tanggalinput, petugas, pemakaian, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',tbl_waters);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in tbl_waters) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < tbl_waters.length; i++) {
      if (tbl_waters[i].ROWID == null) {
        tbl_waters[i].ROWID = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns ROWID
  Future<int> upsert() async {
    try {
      if (await _mnTbl_water.rawInsert(
              'INSERT OR REPLACE INTO tbl_waters (ROWID,idx, unit_code, bulan, tahun, meteran, foto, tanggalinput, petugas, pemakaian, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
              [
                ROWID,
                idx,
                unit_code,
                bulan,
                tahun,
                meteran,
                foto,
                tanggalinput,
                petugas,
                pemakaian,
                sync_date
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbl_water ROWID=$ROWID updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbl_water ROWID=$ROWID did not update');
      }
      return ROWID;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbl_water Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Tbl_water>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Tbl_water> tbl_waters) async {
    final results = await _mnTbl_water.rawInsertAll(
        'INSERT OR REPLACE INTO tbl_waters (ROWID,idx, unit_code, bulan, tahun, meteran, foto, tanggalinput, petugas, pemakaian, sync_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbl_waters);
    return results;
  }

  /// Deletes Tbl_water

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Tbl_water invoked (ROWID=$ROWID)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTbl_water
          .delete(QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]));
    } else {
      return _mnTbl_water.updateBatch(
          QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]),
          {'isDeleted': 1});
    }
  }

  Tbl_waterFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_waterFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Tbl_waterFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_waterFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion tbl_water

// region Tbl_waterField
class Tbl_waterField extends SearchCriteria {
  Tbl_waterField(this.tbl_waterFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Tbl_waterFilterBuilder tbl_waterFB;

  Tbl_waterField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Tbl_waterFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    tbl_waterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waterFB.parameters, param, SqlSyntax.EQuals,
            tbl_waterFB._addedBlocks)
        : setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.NotEQuals, tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    tbl_waterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.EQualsOrNull, tbl_waterFB._addedBlocks)
        : setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder isNull() {
    tbl_waterFB._addedBlocks = setCriteria(
        0,
        tbl_waterFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbl_waterFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbl_waterFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waterFB._addedBlocks);
      _waitingNot = '';
      tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
          tbl_waterFB._addedBlocks.retVal;
    }
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_waterFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbl_waterFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waterFB._addedBlocks);
      _waitingNot = '';
      tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
          tbl_waterFB._addedBlocks.retVal;
      tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
          tbl_waterFB._addedBlocks.retVal;
    }
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_waterFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbl_waterFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waterFB._addedBlocks);
      _waitingNot = '';
      tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
          tbl_waterFB._addedBlocks.retVal;
    }
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbl_waterFB._addedBlocks = setCriteria(
          pFirst,
          tbl_waterFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waterFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbl_waterFB._addedBlocks = setCriteria(pFirst, tbl_waterFB.parameters,
            param, SqlSyntax.LessThan, tbl_waterFB._addedBlocks);
      } else {
        tbl_waterFB._addedBlocks = setCriteria(pFirst, tbl_waterFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, tbl_waterFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbl_waterFB._addedBlocks = setCriteria(pLast, tbl_waterFB.parameters,
            param, SqlSyntax.GreaterThan, tbl_waterFB._addedBlocks);
      } else {
        tbl_waterFB._addedBlocks = setCriteria(pLast, tbl_waterFB.parameters,
            param, SqlSyntax.LessThanOrEquals, tbl_waterFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbl_waterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_waterFB._addedBlocks)
        : setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbl_waterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waterFB.parameters, param, SqlSyntax.LessThan,
            tbl_waterFB._addedBlocks)
        : setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbl_waterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_waterFB._addedBlocks)
        : setCriteria(pValue, tbl_waterFB.parameters, param, SqlSyntax.LessThan,
            tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbl_waterFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_waterFB._addedBlocks)
        : setCriteria(pValue, tbl_waterFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }

  Tbl_waterFilterBuilder inValues(dynamic pValue) {
    tbl_waterFB._addedBlocks = setCriteria(
        pValue,
        tbl_waterFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_waterFB._addedBlocks);
    _waitingNot = '';
    tbl_waterFB._addedBlocks.needEndBlock[tbl_waterFB._blockIndex] =
        tbl_waterFB._addedBlocks.retVal;
    return tbl_waterFB;
  }
}
// endregion Tbl_waterField

// region Tbl_waterFilterBuilder
class Tbl_waterFilterBuilder extends SearchCriteria {
  Tbl_waterFilterBuilder(Tbl_water obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Tbl_water _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Tbl_waterFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Tbl_waterFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Tbl_waterFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Tbl_waterFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Tbl_waterFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Tbl_waterFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Tbl_waterFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_waterFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_waterFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_waterFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_waterFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Tbl_waterField setField(Tbl_waterField field, String colName, DbType dbtype) {
    return Tbl_waterField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Tbl_waterField _ROWID;
  Tbl_waterField get ROWID {
    return _ROWID = setField(_ROWID, 'ROWID', DbType.integer);
  }

  Tbl_waterField _idx;
  Tbl_waterField get idx {
    return _idx = setField(_idx, 'idx', DbType.text);
  }

  Tbl_waterField _unit_code;
  Tbl_waterField get unit_code {
    return _unit_code = setField(_unit_code, 'unit_code', DbType.text);
  }

  Tbl_waterField _bulan;
  Tbl_waterField get bulan {
    return _bulan = setField(_bulan, 'bulan', DbType.text);
  }

  Tbl_waterField _tahun;
  Tbl_waterField get tahun {
    return _tahun = setField(_tahun, 'tahun', DbType.text);
  }

  Tbl_waterField _meteran;
  Tbl_waterField get meteran {
    return _meteran = setField(_meteran, 'meteran', DbType.text);
  }

  Tbl_waterField _foto;
  Tbl_waterField get foto {
    return _foto = setField(_foto, 'foto', DbType.text);
  }

  Tbl_waterField _tanggalinput;
  Tbl_waterField get tanggalinput {
    return _tanggalinput = setField(_tanggalinput, 'tanggalinput', DbType.text);
  }

  Tbl_waterField _petugas;
  Tbl_waterField get petugas {
    return _petugas = setField(_petugas, 'petugas', DbType.text);
  }

  Tbl_waterField _pemakaian;
  Tbl_waterField get pemakaian {
    return _pemakaian = setField(_pemakaian, 'pemakaian', DbType.text);
  }

  Tbl_waterField _sync_date;
  Tbl_waterField get sync_date {
    return _sync_date = setField(_sync_date, 'sync_date', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Tbl_water._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Tbl_water> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Tbl_water._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbl_water.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbl_water.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'ROWID IN (SELECT ROWID from tbl_waters ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTbl_water.updateBatch(qparams, values);
  }

  /// This method always returns Tbl_water Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_water>
  Future<Tbl_water> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbl_water.toList(qparams);
    final data = await objFuture;
    Tbl_water obj;
    if (data.isNotEmpty) {
      obj = Tbl_water.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Tbl_water]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) tbl_waterCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbl_watersFuture = await _obj._mnTbl_water.toList(qparams);
    final int count = tbl_watersFuture[0]['CNT'] as int;
    if (tbl_waterCount != null) {
      tbl_waterCount(count);
    }
    return count;
  }

  /// This method returns List<Tbl_water> [Tbl_water]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_water>
  Future<List<Tbl_water>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Tbl_water> tbl_watersData = await Tbl_water.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tbl_watersData;
  }

  /// This method returns Json String [Tbl_water]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbl_water]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbl_water]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbl_water.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbl_water]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `ROWID` FROM tbl_waters WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> ROWIDData = <int>[];
    qparams.selectColumns = ['ROWID'];
    final ROWIDFuture = await _obj._mnTbl_water.toList(qparams);

    final int count = ROWIDFuture.length;
    for (int i = 0; i < count; i++) {
      ROWIDData.add(ROWIDFuture[i]['ROWID'] as int);
    }
    return ROWIDData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbl_water]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_water.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Tbl_water.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_water.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Tbl_waterFilterBuilder

// region Tbl_waterFields
class Tbl_waterFields {
  static TableField _fROWID;
  static TableField get ROWID {
    return _fROWID =
        _fROWID ?? SqlSyntax.setField(_fROWID, 'rowid', DbType.integer);
  }

  static TableField _fIdx;
  static TableField get idx {
    return _fIdx = _fIdx ?? SqlSyntax.setField(_fIdx, 'idx', DbType.text);
  }

  static TableField _fUnit_code;
  static TableField get unit_code {
    return _fUnit_code = _fUnit_code ??
        SqlSyntax.setField(_fUnit_code, 'unit_code', DbType.text);
  }

  static TableField _fBulan;
  static TableField get bulan {
    return _fBulan =
        _fBulan ?? SqlSyntax.setField(_fBulan, 'bulan', DbType.text);
  }

  static TableField _fTahun;
  static TableField get tahun {
    return _fTahun =
        _fTahun ?? SqlSyntax.setField(_fTahun, 'tahun', DbType.text);
  }

  static TableField _fMeteran;
  static TableField get meteran {
    return _fMeteran =
        _fMeteran ?? SqlSyntax.setField(_fMeteran, 'meteran', DbType.text);
  }

  static TableField _fFoto;
  static TableField get foto {
    return _fFoto = _fFoto ?? SqlSyntax.setField(_fFoto, 'foto', DbType.text);
  }

  static TableField _fTanggalinput;
  static TableField get tanggalinput {
    return _fTanggalinput = _fTanggalinput ??
        SqlSyntax.setField(_fTanggalinput, 'tanggalinput', DbType.text);
  }

  static TableField _fPetugas;
  static TableField get petugas {
    return _fPetugas =
        _fPetugas ?? SqlSyntax.setField(_fPetugas, 'petugas', DbType.text);
  }

  static TableField _fPemakaian;
  static TableField get pemakaian {
    return _fPemakaian = _fPemakaian ??
        SqlSyntax.setField(_fPemakaian, 'pemakaian', DbType.text);
  }

  static TableField _fSync_date;
  static TableField get sync_date {
    return _fSync_date = _fSync_date ??
        SqlSyntax.setField(_fSync_date, 'sync_date', DbType.text);
  }
}
// endregion Tbl_waterFields

//region Tbl_waterManager
class Tbl_waterManager extends SqfEntityProvider {
  Tbl_waterManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tbl_waters';
  static final List<String> _primaryKeyList = ['ROWID'];
  static final String _whereStr = 'ROWID=?';
}

//endregion Tbl_waterManager
// region Tbl_electrics_temp
class Tbl_electrics_temp {
  Tbl_electrics_temp(
      {this.ROWID,
      this.id,
      this.unit_code,
      this.type,
      this.bulan,
      this.tahun,
      this.nomor_seri,
      this.pemakaian,
      this.foto,
      this.insert_date,
      this.insert_by}) {
    _setDefaultValues();
  }
  Tbl_electrics_temp.withFields(
      this.id,
      this.unit_code,
      this.type,
      this.bulan,
      this.tahun,
      this.nomor_seri,
      this.pemakaian,
      this.foto,
      this.insert_date,
      this.insert_by) {
    _setDefaultValues();
  }
  Tbl_electrics_temp.withId(
      this.ROWID,
      this.id,
      this.unit_code,
      this.type,
      this.bulan,
      this.tahun,
      this.nomor_seri,
      this.pemakaian,
      this.foto,
      this.insert_date,
      this.insert_by) {
    _setDefaultValues();
  }
  Tbl_electrics_temp.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    ROWID = int.tryParse(o['ROWID'].toString());
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['unit_code'] != null) {
      unit_code = o['unit_code'] as String;
    }
    if (o['type'] != null) {
      type = o['type'] as String;
    }
    if (o['bulan'] != null) {
      bulan = o['bulan'] as String;
    }
    if (o['tahun'] != null) {
      tahun = o['tahun'] as String;
    }
    if (o['nomor_seri'] != null) {
      nomor_seri = o['nomor_seri'] as String;
    }
    if (o['pemakaian'] != null) {
      pemakaian = o['pemakaian'] as String;
    }
    if (o['foto'] != null) {
      foto = o['foto'] as String;
    }
    if (o['insert_date'] != null) {
      insert_date = o['insert_date'] as String;
    }
    if (o['insert_by'] != null) {
      insert_by = o['insert_by'] as String;
    }
  }
  // FIELDS (Tbl_electrics_temp)
  int ROWID;
  int id;
  String unit_code;
  String type;
  String bulan;
  String tahun;
  String nomor_seri;
  String pemakaian;
  String foto;
  String insert_date;
  String insert_by;

  BoolResult saveResult;
  // end FIELDS (Tbl_electrics_temp)

  static const bool _softDeleteActivated = false;
  Tbl_electrics_tempManager __mnTbl_electrics_temp;

  Tbl_electrics_tempManager get _mnTbl_electrics_temp {
    return __mnTbl_electrics_temp =
        __mnTbl_electrics_temp ?? Tbl_electrics_tempManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (id != null) {
      map['id'] = id;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (nomor_seri != null) {
      map['nomor_seri'] = nomor_seri;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (insert_date != null) {
      map['insert_date'] = insert_date;
    }

    if (insert_by != null) {
      map['insert_by'] = insert_by;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (id != null) {
      map['id'] = id;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (nomor_seri != null) {
      map['nomor_seri'] = nomor_seri;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (insert_date != null) {
      map['insert_date'] = insert_date;
    }

    if (insert_by != null) {
      map['insert_by'] = insert_by;
    }

    return map;
  }

  /// This method returns Json String [Tbl_electrics_temp]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbl_electrics_temp]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      unit_code,
      type,
      bulan,
      tahun,
      nomor_seri,
      pemakaian,
      foto,
      insert_date,
      insert_by
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      ROWID,
      id,
      unit_code,
      type,
      bulan,
      tahun,
      nomor_seri,
      pemakaian,
      foto,
      insert_date,
      insert_by
    ];
  }

  static Future<List<Tbl_electrics_temp>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_electrics_temp.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Tbl_electrics_temp>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbl_electrics_temp>[];
    try {
      objList = list
          .map((tbl_electrics_temp) => Tbl_electrics_temp.fromMap(
              tbl_electrics_temp as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_electrics_temp.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbl_electrics_temp>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbl_electrics_temp> objList = <Tbl_electrics_temp>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbl_electrics_temp.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbl_electrics_temp by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int ROWID
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Tbl_electrics_temp if exist, otherwise returns null
  Future<Tbl_electrics_temp> getById(int ROWID,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (ROWID == null) {
      return null;
    }
    Tbl_electrics_temp obj;
    final data = await _mnTbl_electrics_temp.getById([ROWID]);
    if (data.length != 0) {
      obj = Tbl_electrics_temp.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbl_electrics_temp) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record

  /// <returns>Returns ROWID
  Future<int> save() async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_electrics_temp.insert(this);
    } else {
      // ROWID= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbl_electrics_temp.update(this);
    }

    return ROWID;
  }

  /// saveAs Tbl_electrics_temp. Returns a new Primary Key value of Tbl_electrics_temp

  /// <returns>Returns a new Primary Key value of Tbl_electrics_temp
  Future<int> saveAs() async {
    ROWID = null;

    return save();
  }

  /// saveAll method saves the sent List<Tbl_electrics_temp> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Tbl_electrics_temp> tbl_electrics_temps) async {
    // final results = _mnTbl_electrics_temp.saveAll('INSERT OR REPLACE INTO tbl_electrics_temp (ROWID,id, unit_code, type, bulan, tahun, nomor_seri, pemakaian, foto, insert_date, insert_by)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',tbl_electrics_temps);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in tbl_electrics_temps) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < tbl_electrics_temps.length; i++) {
      if (tbl_electrics_temps[i].ROWID == null) {
        tbl_electrics_temps[i].ROWID = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns ROWID
  Future<int> upsert() async {
    try {
      if (await _mnTbl_electrics_temp.rawInsert(
              'INSERT OR REPLACE INTO tbl_electrics_temp (ROWID,id, unit_code, type, bulan, tahun, nomor_seri, pemakaian, foto, insert_date, insert_by)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
              [
                ROWID,
                id,
                unit_code,
                type,
                bulan,
                tahun,
                nomor_seri,
                pemakaian,
                foto,
                insert_date,
                insert_by
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Tbl_electrics_temp ROWID=$ROWID updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbl_electrics_temp ROWID=$ROWID did not update');
      }
      return ROWID;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Tbl_electrics_temp Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Tbl_electrics_temp>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Tbl_electrics_temp> tbl_electrics_temps) async {
    final results = await _mnTbl_electrics_temp.rawInsertAll(
        'INSERT OR REPLACE INTO tbl_electrics_temp (ROWID,id, unit_code, type, bulan, tahun, nomor_seri, pemakaian, foto, insert_date, insert_by)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbl_electrics_temps);
    return results;
  }

  /// Deletes Tbl_electrics_temp

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Tbl_electrics_temp invoked (ROWID=$ROWID)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTbl_electrics_temp
          .delete(QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]));
    } else {
      return _mnTbl_electrics_temp.updateBatch(
          QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]),
          {'isDeleted': 1});
    }
  }

  Tbl_electrics_tempFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_electrics_tempFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Tbl_electrics_tempFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_electrics_tempFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion tbl_electrics_temp

// region Tbl_electrics_tempField
class Tbl_electrics_tempField extends SearchCriteria {
  Tbl_electrics_tempField(this.tbl_electrics_tempFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Tbl_electrics_tempFilterBuilder tbl_electrics_tempFB;

  Tbl_electrics_tempField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Tbl_electrics_tempFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    tbl_electrics_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.EQuals, tbl_electrics_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.NotEQuals, tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    tbl_electrics_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.EQualsOrNull, tbl_electrics_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder isNull() {
    tbl_electrics_tempFB._addedBlocks = setCriteria(
        0,
        tbl_electrics_tempFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbl_electrics_tempFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbl_electrics_tempFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electrics_tempFB._addedBlocks);
      _waitingNot = '';
      tbl_electrics_tempFB
              ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
          tbl_electrics_tempFB._addedBlocks.retVal;
    }
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_electrics_tempFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbl_electrics_tempFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electrics_tempFB._addedBlocks);
      _waitingNot = '';
      tbl_electrics_tempFB
              ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
          tbl_electrics_tempFB._addedBlocks.retVal;
      tbl_electrics_tempFB
              ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
          tbl_electrics_tempFB._addedBlocks.retVal;
    }
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_electrics_tempFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbl_electrics_tempFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electrics_tempFB._addedBlocks);
      _waitingNot = '';
      tbl_electrics_tempFB
              ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
          tbl_electrics_tempFB._addedBlocks.retVal;
    }
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbl_electrics_tempFB._addedBlocks = setCriteria(
          pFirst,
          tbl_electrics_tempFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_electrics_tempFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbl_electrics_tempFB._addedBlocks = setCriteria(
            pFirst,
            tbl_electrics_tempFB.parameters,
            param,
            SqlSyntax.LessThan,
            tbl_electrics_tempFB._addedBlocks);
      } else {
        tbl_electrics_tempFB._addedBlocks = setCriteria(
            pFirst,
            tbl_electrics_tempFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            tbl_electrics_tempFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbl_electrics_tempFB._addedBlocks = setCriteria(
            pLast,
            tbl_electrics_tempFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            tbl_electrics_tempFB._addedBlocks);
      } else {
        tbl_electrics_tempFB._addedBlocks = setCriteria(
            pLast,
            tbl_electrics_tempFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            tbl_electrics_tempFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbl_electrics_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_electrics_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbl_electrics_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.LessThan, tbl_electrics_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbl_electrics_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_electrics_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.LessThan, tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbl_electrics_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_electrics_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_electrics_tempFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }

  Tbl_electrics_tempFilterBuilder inValues(dynamic pValue) {
    tbl_electrics_tempFB._addedBlocks = setCriteria(
        pValue,
        tbl_electrics_tempFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_electrics_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_electrics_tempFB
            ._addedBlocks.needEndBlock[tbl_electrics_tempFB._blockIndex] =
        tbl_electrics_tempFB._addedBlocks.retVal;
    return tbl_electrics_tempFB;
  }
}
// endregion Tbl_electrics_tempField

// region Tbl_electrics_tempFilterBuilder
class Tbl_electrics_tempFilterBuilder extends SearchCriteria {
  Tbl_electrics_tempFilterBuilder(Tbl_electrics_temp obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Tbl_electrics_temp _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Tbl_electrics_tempFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Tbl_electrics_tempFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Tbl_electrics_tempFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Tbl_electrics_tempFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Tbl_electrics_tempFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Tbl_electrics_tempFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Tbl_electrics_tempFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_electrics_tempFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_electrics_tempFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_electrics_tempFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_electrics_tempFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Tbl_electrics_tempField setField(
      Tbl_electrics_tempField field, String colName, DbType dbtype) {
    return Tbl_electrics_tempField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Tbl_electrics_tempField _ROWID;
  Tbl_electrics_tempField get ROWID {
    return _ROWID = setField(_ROWID, 'ROWID', DbType.integer);
  }

  Tbl_electrics_tempField _id;
  Tbl_electrics_tempField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Tbl_electrics_tempField _unit_code;
  Tbl_electrics_tempField get unit_code {
    return _unit_code = setField(_unit_code, 'unit_code', DbType.text);
  }

  Tbl_electrics_tempField _type;
  Tbl_electrics_tempField get type {
    return _type = setField(_type, 'type', DbType.text);
  }

  Tbl_electrics_tempField _bulan;
  Tbl_electrics_tempField get bulan {
    return _bulan = setField(_bulan, 'bulan', DbType.text);
  }

  Tbl_electrics_tempField _tahun;
  Tbl_electrics_tempField get tahun {
    return _tahun = setField(_tahun, 'tahun', DbType.text);
  }

  Tbl_electrics_tempField _nomor_seri;
  Tbl_electrics_tempField get nomor_seri {
    return _nomor_seri = setField(_nomor_seri, 'nomor_seri', DbType.text);
  }

  Tbl_electrics_tempField _pemakaian;
  Tbl_electrics_tempField get pemakaian {
    return _pemakaian = setField(_pemakaian, 'pemakaian', DbType.text);
  }

  Tbl_electrics_tempField _foto;
  Tbl_electrics_tempField get foto {
    return _foto = setField(_foto, 'foto', DbType.text);
  }

  Tbl_electrics_tempField _insert_date;
  Tbl_electrics_tempField get insert_date {
    return _insert_date = setField(_insert_date, 'insert_date', DbType.text);
  }

  Tbl_electrics_tempField _insert_by;
  Tbl_electrics_tempField get insert_by {
    return _insert_by = setField(_insert_by, 'insert_by', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Tbl_electrics_temp._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Tbl_electrics_temp> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Tbl_electrics_temp._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbl_electrics_temp
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbl_electrics_temp.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'ROWID IN (SELECT ROWID from tbl_electrics_temp ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTbl_electrics_temp.updateBatch(qparams, values);
  }

  /// This method always returns Tbl_electrics_temp Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_electrics_temp>
  Future<Tbl_electrics_temp> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbl_electrics_temp.toList(qparams);
    final data = await objFuture;
    Tbl_electrics_temp obj;
    if (data.isNotEmpty) {
      obj = Tbl_electrics_temp.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Tbl_electrics_temp]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) tbl_electrics_tempCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbl_electrics_tempsFuture =
        await _obj._mnTbl_electrics_temp.toList(qparams);
    final int count = tbl_electrics_tempsFuture[0]['CNT'] as int;
    if (tbl_electrics_tempCount != null) {
      tbl_electrics_tempCount(count);
    }
    return count;
  }

  /// This method returns List<Tbl_electrics_temp> [Tbl_electrics_temp]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_electrics_temp>
  Future<List<Tbl_electrics_temp>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Tbl_electrics_temp> tbl_electrics_tempsData =
        await Tbl_electrics_temp.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return tbl_electrics_tempsData;
  }

  /// This method returns Json String [Tbl_electrics_temp]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbl_electrics_temp]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbl_electrics_temp]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbl_electrics_temp.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbl_electrics_temp]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `ROWID` FROM tbl_electrics_temp WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> ROWIDData = <int>[];
    qparams.selectColumns = ['ROWID'];
    final ROWIDFuture = await _obj._mnTbl_electrics_temp.toList(qparams);

    final int count = ROWIDFuture.length;
    for (int i = 0; i < count; i++) {
      ROWIDData.add(ROWIDFuture[i]['ROWID'] as int);
    }
    return ROWIDData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbl_electrics_temp]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_electrics_temp.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Tbl_electrics_temp.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_electrics_temp.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Tbl_electrics_tempFilterBuilder

// region Tbl_electrics_tempFields
class Tbl_electrics_tempFields {
  static TableField _fROWID;
  static TableField get ROWID {
    return _fROWID =
        _fROWID ?? SqlSyntax.setField(_fROWID, 'rowid', DbType.integer);
  }

  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fUnit_code;
  static TableField get unit_code {
    return _fUnit_code = _fUnit_code ??
        SqlSyntax.setField(_fUnit_code, 'unit_code', DbType.text);
  }

  static TableField _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }

  static TableField _fBulan;
  static TableField get bulan {
    return _fBulan =
        _fBulan ?? SqlSyntax.setField(_fBulan, 'bulan', DbType.text);
  }

  static TableField _fTahun;
  static TableField get tahun {
    return _fTahun =
        _fTahun ?? SqlSyntax.setField(_fTahun, 'tahun', DbType.text);
  }

  static TableField _fNomor_seri;
  static TableField get nomor_seri {
    return _fNomor_seri = _fNomor_seri ??
        SqlSyntax.setField(_fNomor_seri, 'nomor_seri', DbType.text);
  }

  static TableField _fPemakaian;
  static TableField get pemakaian {
    return _fPemakaian = _fPemakaian ??
        SqlSyntax.setField(_fPemakaian, 'pemakaian', DbType.text);
  }

  static TableField _fFoto;
  static TableField get foto {
    return _fFoto = _fFoto ?? SqlSyntax.setField(_fFoto, 'foto', DbType.text);
  }

  static TableField _fInsert_date;
  static TableField get insert_date {
    return _fInsert_date = _fInsert_date ??
        SqlSyntax.setField(_fInsert_date, 'insert_date', DbType.text);
  }

  static TableField _fInsert_by;
  static TableField get insert_by {
    return _fInsert_by = _fInsert_by ??
        SqlSyntax.setField(_fInsert_by, 'insert_by', DbType.text);
  }
}
// endregion Tbl_electrics_tempFields

//region Tbl_electrics_tempManager
class Tbl_electrics_tempManager extends SqfEntityProvider {
  Tbl_electrics_tempManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tbl_electrics_temp';
  static final List<String> _primaryKeyList = ['ROWID'];
  static final String _whereStr = 'ROWID=?';
}

//endregion Tbl_electrics_tempManager
// region Tbl_waters_temp
class Tbl_waters_temp {
  Tbl_waters_temp(
      {this.ROWID,
      this.id,
      this.unit_code,
      this.type,
      this.bulan,
      this.tahun,
      this.nomor_seri,
      this.pemakaian,
      this.foto,
      this.insert_date,
      this.insert_by}) {
    _setDefaultValues();
  }
  Tbl_waters_temp.withFields(
      this.id,
      this.unit_code,
      this.type,
      this.bulan,
      this.tahun,
      this.nomor_seri,
      this.pemakaian,
      this.foto,
      this.insert_date,
      this.insert_by) {
    _setDefaultValues();
  }
  Tbl_waters_temp.withId(
      this.ROWID,
      this.id,
      this.unit_code,
      this.type,
      this.bulan,
      this.tahun,
      this.nomor_seri,
      this.pemakaian,
      this.foto,
      this.insert_date,
      this.insert_by) {
    _setDefaultValues();
  }
  Tbl_waters_temp.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    ROWID = int.tryParse(o['ROWID'].toString());
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['unit_code'] != null) {
      unit_code = o['unit_code'] as String;
    }
    if (o['type'] != null) {
      type = o['type'] as String;
    }
    if (o['bulan'] != null) {
      bulan = o['bulan'] as String;
    }
    if (o['tahun'] != null) {
      tahun = o['tahun'] as String;
    }
    if (o['nomor_seri'] != null) {
      nomor_seri = o['nomor_seri'] as String;
    }
    if (o['pemakaian'] != null) {
      pemakaian = o['pemakaian'] as String;
    }
    if (o['foto'] != null) {
      foto = o['foto'] as String;
    }
    if (o['insert_date'] != null) {
      insert_date = o['insert_date'] as String;
    }
    if (o['insert_by'] != null) {
      insert_by = o['insert_by'] as String;
    }
  }
  // FIELDS (Tbl_waters_temp)
  int ROWID;
  int id;
  String unit_code;
  String type;
  String bulan;
  String tahun;
  String nomor_seri;
  String pemakaian;
  String foto;
  String insert_date;
  String insert_by;

  BoolResult saveResult;
  // end FIELDS (Tbl_waters_temp)

  static const bool _softDeleteActivated = false;
  Tbl_waters_tempManager __mnTbl_waters_temp;

  Tbl_waters_tempManager get _mnTbl_waters_temp {
    return __mnTbl_waters_temp =
        __mnTbl_waters_temp ?? Tbl_waters_tempManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (id != null) {
      map['id'] = id;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (nomor_seri != null) {
      map['nomor_seri'] = nomor_seri;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (insert_date != null) {
      map['insert_date'] = insert_date;
    }

    if (insert_by != null) {
      map['insert_by'] = insert_by;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (ROWID != null) {
      map['ROWID'] = ROWID;
    }
    if (id != null) {
      map['id'] = id;
    }

    if (unit_code != null) {
      map['unit_code'] = unit_code;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (bulan != null) {
      map['bulan'] = bulan;
    }

    if (tahun != null) {
      map['tahun'] = tahun;
    }

    if (nomor_seri != null) {
      map['nomor_seri'] = nomor_seri;
    }

    if (pemakaian != null) {
      map['pemakaian'] = pemakaian;
    }

    if (foto != null) {
      map['foto'] = foto;
    }

    if (insert_date != null) {
      map['insert_date'] = insert_date;
    }

    if (insert_by != null) {
      map['insert_by'] = insert_by;
    }

    return map;
  }

  /// This method returns Json String [Tbl_waters_temp]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbl_waters_temp]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      unit_code,
      type,
      bulan,
      tahun,
      nomor_seri,
      pemakaian,
      foto,
      insert_date,
      insert_by
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      ROWID,
      id,
      unit_code,
      type,
      bulan,
      tahun,
      nomor_seri,
      pemakaian,
      foto,
      insert_date,
      insert_by
    ];
  }

  static Future<List<Tbl_waters_temp>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_waters_temp.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Tbl_waters_temp>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbl_waters_temp>[];
    try {
      objList = list
          .map((tbl_waters_temp) =>
              Tbl_waters_temp.fromMap(tbl_waters_temp as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Tbl_waters_temp.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbl_waters_temp>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbl_waters_temp> objList = <Tbl_waters_temp>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbl_waters_temp.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbl_waters_temp by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int ROWID
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Tbl_waters_temp if exist, otherwise returns null
  Future<Tbl_waters_temp> getById(int ROWID,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (ROWID == null) {
      return null;
    }
    Tbl_waters_temp obj;
    final data = await _mnTbl_waters_temp.getById([ROWID]);
    if (data.length != 0) {
      obj = Tbl_waters_temp.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbl_waters_temp) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record

  /// <returns>Returns ROWID
  Future<int> save() async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_waters_temp.insert(this);
    } else {
      // ROWID= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbl_waters_temp.update(this);
    }

    return ROWID;
  }

  /// saveAs Tbl_waters_temp. Returns a new Primary Key value of Tbl_waters_temp

  /// <returns>Returns a new Primary Key value of Tbl_waters_temp
  Future<int> saveAs() async {
    ROWID = null;

    return save();
  }

  /// saveAll method saves the sent List<Tbl_waters_temp> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Tbl_waters_temp> tbl_waters_temps) async {
    // final results = _mnTbl_waters_temp.saveAll('INSERT OR REPLACE INTO tbl_waters_temp (ROWID,id, unit_code, type, bulan, tahun, nomor_seri, pemakaian, foto, insert_date, insert_by)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',tbl_waters_temps);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in tbl_waters_temps) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < tbl_waters_temps.length; i++) {
      if (tbl_waters_temps[i].ROWID == null) {
        tbl_waters_temps[i].ROWID = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns ROWID
  Future<int> upsert() async {
    try {
      if (await _mnTbl_waters_temp.rawInsert(
              'INSERT OR REPLACE INTO tbl_waters_temp (ROWID,id, unit_code, type, bulan, tahun, nomor_seri, pemakaian, foto, insert_date, insert_by)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
              [
                ROWID,
                id,
                unit_code,
                type,
                bulan,
                tahun,
                nomor_seri,
                pemakaian,
                foto,
                insert_date,
                insert_by
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Tbl_waters_temp ROWID=$ROWID updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbl_waters_temp ROWID=$ROWID did not update');
      }
      return ROWID;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbl_waters_temp Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Tbl_waters_temp>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Tbl_waters_temp> tbl_waters_temps) async {
    final results = await _mnTbl_waters_temp.rawInsertAll(
        'INSERT OR REPLACE INTO tbl_waters_temp (ROWID,id, unit_code, type, bulan, tahun, nomor_seri, pemakaian, foto, insert_date, insert_by)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbl_waters_temps);
    return results;
  }

  /// Deletes Tbl_waters_temp

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Tbl_waters_temp invoked (ROWID=$ROWID)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTbl_waters_temp
          .delete(QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]));
    } else {
      return _mnTbl_waters_temp.updateBatch(
          QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]),
          {'isDeleted': 1});
    }
  }

  Tbl_waters_tempFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_waters_tempFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Tbl_waters_tempFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Tbl_waters_tempFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion tbl_waters_temp

// region Tbl_waters_tempField
class Tbl_waters_tempField extends SearchCriteria {
  Tbl_waters_tempField(this.tbl_waters_tempFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Tbl_waters_tempFilterBuilder tbl_waters_tempFB;

  Tbl_waters_tempField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Tbl_waters_tempFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    tbl_waters_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.EQuals, tbl_waters_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.NotEQuals, tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    tbl_waters_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.EQualsOrNull, tbl_waters_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder isNull() {
    tbl_waters_tempFB._addedBlocks = setCriteria(
        0,
        tbl_waters_tempFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      tbl_waters_tempFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          tbl_waters_tempFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waters_tempFB._addedBlocks);
      _waitingNot = '';
      tbl_waters_tempFB
              ._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
          tbl_waters_tempFB._addedBlocks.retVal;
    }
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_waters_tempFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          tbl_waters_tempFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waters_tempFB._addedBlocks);
      _waitingNot = '';
      tbl_waters_tempFB
              ._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
          tbl_waters_tempFB._addedBlocks.retVal;
      tbl_waters_tempFB
              ._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
          tbl_waters_tempFB._addedBlocks.retVal;
    }
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      tbl_waters_tempFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          tbl_waters_tempFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waters_tempFB._addedBlocks);
      _waitingNot = '';
      tbl_waters_tempFB
              ._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
          tbl_waters_tempFB._addedBlocks.retVal;
    }
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      tbl_waters_tempFB._addedBlocks = setCriteria(
          pFirst,
          tbl_waters_tempFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          tbl_waters_tempFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        tbl_waters_tempFB._addedBlocks = setCriteria(
            pFirst,
            tbl_waters_tempFB.parameters,
            param,
            SqlSyntax.LessThan,
            tbl_waters_tempFB._addedBlocks);
      } else {
        tbl_waters_tempFB._addedBlocks = setCriteria(
            pFirst,
            tbl_waters_tempFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            tbl_waters_tempFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        tbl_waters_tempFB._addedBlocks = setCriteria(
            pLast,
            tbl_waters_tempFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            tbl_waters_tempFB._addedBlocks);
      } else {
        tbl_waters_tempFB._addedBlocks = setCriteria(
            pLast,
            tbl_waters_tempFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            tbl_waters_tempFB._addedBlocks);
      }
    }
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    tbl_waters_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_waters_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    tbl_waters_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.LessThan, tbl_waters_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    tbl_waters_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, tbl_waters_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.LessThan, tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    tbl_waters_tempFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.LessThanOrEquals, tbl_waters_tempFB._addedBlocks)
        : setCriteria(pValue, tbl_waters_tempFB.parameters, param,
            SqlSyntax.GreaterThan, tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }

  Tbl_waters_tempFilterBuilder inValues(dynamic pValue) {
    tbl_waters_tempFB._addedBlocks = setCriteria(
        pValue,
        tbl_waters_tempFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        tbl_waters_tempFB._addedBlocks);
    _waitingNot = '';
    tbl_waters_tempFB._addedBlocks.needEndBlock[tbl_waters_tempFB._blockIndex] =
        tbl_waters_tempFB._addedBlocks.retVal;
    return tbl_waters_tempFB;
  }
}
// endregion Tbl_waters_tempField

// region Tbl_waters_tempFilterBuilder
class Tbl_waters_tempFilterBuilder extends SearchCriteria {
  Tbl_waters_tempFilterBuilder(Tbl_waters_temp obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Tbl_waters_temp _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Tbl_waters_tempFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Tbl_waters_tempFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Tbl_waters_tempFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Tbl_waters_tempFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Tbl_waters_tempFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Tbl_waters_tempFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Tbl_waters_tempFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_waters_tempFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_waters_tempFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Tbl_waters_tempFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Tbl_waters_tempFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Tbl_waters_tempField setField(
      Tbl_waters_tempField field, String colName, DbType dbtype) {
    return Tbl_waters_tempField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Tbl_waters_tempField _ROWID;
  Tbl_waters_tempField get ROWID {
    return _ROWID = setField(_ROWID, 'ROWID', DbType.integer);
  }

  Tbl_waters_tempField _id;
  Tbl_waters_tempField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Tbl_waters_tempField _unit_code;
  Tbl_waters_tempField get unit_code {
    return _unit_code = setField(_unit_code, 'unit_code', DbType.text);
  }

  Tbl_waters_tempField _type;
  Tbl_waters_tempField get type {
    return _type = setField(_type, 'type', DbType.text);
  }

  Tbl_waters_tempField _bulan;
  Tbl_waters_tempField get bulan {
    return _bulan = setField(_bulan, 'bulan', DbType.text);
  }

  Tbl_waters_tempField _tahun;
  Tbl_waters_tempField get tahun {
    return _tahun = setField(_tahun, 'tahun', DbType.text);
  }

  Tbl_waters_tempField _nomor_seri;
  Tbl_waters_tempField get nomor_seri {
    return _nomor_seri = setField(_nomor_seri, 'nomor_seri', DbType.text);
  }

  Tbl_waters_tempField _pemakaian;
  Tbl_waters_tempField get pemakaian {
    return _pemakaian = setField(_pemakaian, 'pemakaian', DbType.text);
  }

  Tbl_waters_tempField _foto;
  Tbl_waters_tempField get foto {
    return _foto = setField(_foto, 'foto', DbType.text);
  }

  Tbl_waters_tempField _insert_date;
  Tbl_waters_tempField get insert_date {
    return _insert_date = setField(_insert_date, 'insert_date', DbType.text);
  }

  Tbl_waters_tempField _insert_by;
  Tbl_waters_tempField get insert_by {
    return _insert_by = setField(_insert_by, 'insert_by', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Tbl_waters_temp._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Tbl_waters_temp> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Tbl_waters_temp._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTbl_waters_temp.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTbl_waters_temp.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'ROWID IN (SELECT ROWID from tbl_waters_temp ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTbl_waters_temp.updateBatch(qparams, values);
  }

  /// This method always returns Tbl_waters_temp Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_waters_temp>
  Future<Tbl_waters_temp> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTbl_waters_temp.toList(qparams);
    final data = await objFuture;
    Tbl_waters_temp obj;
    if (data.isNotEmpty) {
      obj = Tbl_waters_temp.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Tbl_waters_temp]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) tbl_waters_tempCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbl_waters_tempsFuture =
        await _obj._mnTbl_waters_temp.toList(qparams);
    final int count = tbl_waters_tempsFuture[0]['CNT'] as int;
    if (tbl_waters_tempCount != null) {
      tbl_waters_tempCount(count);
    }
    return count;
  }

  /// This method returns List<Tbl_waters_temp> [Tbl_waters_temp]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tbl_waters_temp>
  Future<List<Tbl_waters_temp>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Tbl_waters_temp> tbl_waters_tempsData =
        await Tbl_waters_temp.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return tbl_waters_tempsData;
  }

  /// This method returns Json String [Tbl_waters_temp]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbl_waters_temp]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbl_waters_temp]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTbl_waters_temp.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbl_waters_temp]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `ROWID` FROM tbl_waters_temp WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> ROWIDData = <int>[];
    qparams.selectColumns = ['ROWID'];
    final ROWIDFuture = await _obj._mnTbl_waters_temp.toList(qparams);

    final int count = ROWIDFuture.length;
    for (int i = 0; i < count; i++) {
      ROWIDData.add(ROWIDFuture[i]['ROWID'] as int);
    }
    return ROWIDData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbl_waters_temp]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_waters_temp.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Tbl_waters_temp.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTbl_waters_temp.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Tbl_waters_tempFilterBuilder

// region Tbl_waters_tempFields
class Tbl_waters_tempFields {
  static TableField _fROWID;
  static TableField get ROWID {
    return _fROWID =
        _fROWID ?? SqlSyntax.setField(_fROWID, 'rowid', DbType.integer);
  }

  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fUnit_code;
  static TableField get unit_code {
    return _fUnit_code = _fUnit_code ??
        SqlSyntax.setField(_fUnit_code, 'unit_code', DbType.text);
  }

  static TableField _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }

  static TableField _fBulan;
  static TableField get bulan {
    return _fBulan =
        _fBulan ?? SqlSyntax.setField(_fBulan, 'bulan', DbType.text);
  }

  static TableField _fTahun;
  static TableField get tahun {
    return _fTahun =
        _fTahun ?? SqlSyntax.setField(_fTahun, 'tahun', DbType.text);
  }

  static TableField _fNomor_seri;
  static TableField get nomor_seri {
    return _fNomor_seri = _fNomor_seri ??
        SqlSyntax.setField(_fNomor_seri, 'nomor_seri', DbType.text);
  }

  static TableField _fPemakaian;
  static TableField get pemakaian {
    return _fPemakaian = _fPemakaian ??
        SqlSyntax.setField(_fPemakaian, 'pemakaian', DbType.text);
  }

  static TableField _fFoto;
  static TableField get foto {
    return _fFoto = _fFoto ?? SqlSyntax.setField(_fFoto, 'foto', DbType.text);
  }

  static TableField _fInsert_date;
  static TableField get insert_date {
    return _fInsert_date = _fInsert_date ??
        SqlSyntax.setField(_fInsert_date, 'insert_date', DbType.text);
  }

  static TableField _fInsert_by;
  static TableField get insert_by {
    return _fInsert_by = _fInsert_by ??
        SqlSyntax.setField(_fInsert_by, 'insert_by', DbType.text);
  }
}
// endregion Tbl_waters_tempFields

//region Tbl_waters_tempManager
class Tbl_waters_tempManager extends SqfEntityProvider {
  Tbl_waters_tempManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tbl_waters_temp';
  static final List<String> _primaryKeyList = ['ROWID'];
  static final String _whereStr = 'ROWID=?';
}

//endregion Tbl_waters_tempManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o) nextval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o) currentval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o) currentval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class DbModelSequenceManager extends SqfEntityProvider {
  DbModelSequenceManager() : super(DbModel());
}
// END OF ENTITIES
